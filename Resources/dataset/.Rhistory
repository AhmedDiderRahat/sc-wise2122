mul <- x * y
div <- x %/% y
mod <- x %% y
sprintf("Addition= %i, Subtrction= %i, Multiplication= %i, Division= %i, modulus= %i",
add, sub, mul, div, mod)
#print and variable assignment
print("hello world")
x <- 5
y <- 2
add <- x + y
sub <- x - y
mul <- x * y
div <- x %/% y
mod <- x %% y
sprintf("Addition= %i, Subtrction= %i, Multiplication= %i, Division= %i,
modulus= %i", add, sub, mul, div, mod)
# arrays
weight = c(56, 49, 52, 75, 80, 88, 92)
print(weight)
weight = c(60, 72, 57, 90, 95, 72)
print(weight)
#print and variable assignment
print("hello world")
x <- 5
y <- 2
add <- x + y
sub <- x - y
mul <- x * y
div <- x %/% y
mod <- x %% y
sprintf("Addition= %i, Subtrction= %i, Multiplication= %i, Division= %i,
modulus= %i", add, sub, mul, div, mod)
# arrays
weight = c(60, 72, 57, 90, 95, 72)
height = c(1.75, 1.80, 1.65, 1.90, 1.74, 1.91)
#print and variable assignment
print("hello world")
x <- 5
y <- 2
add <- x + y
sub <- x - y
mul <- x * y
div <- x %/% y
mod <- x %% y
sprintf("Addition= %i, Subtrction= %i, Multiplication= %i, Division= %i,
modulus= %i", add, sub, mul, div, mod)
# arrays
weight = c(60, 72, 57, 90, 95, 72)
height = c(1.75, 1.80, 1.65, 1.90, 1.74, 1.91)
bmi = weight / height^2
print(bmi)
#print and variable assignment
print("hello world")
x <- 5
y <- 2
add <- x + y
sub <- x - y
mul <- x * y
div <- x %/% y
mod <- x %% y
sprintf("Addition= %i, Subtrction= %i, Multiplication= %i, Division= %i,
modulus= %i", add, sub, mul, div, mod)
# arrays
weight <- c(60, 72, 57, 90, 95, 72)
height <- c(1.75, 1.80, 1.65, 1.90, 1.74, 1.91)
bmi <- weight / height^2
print(bmi)
print(bmi)
library(gclus)
data(bank)
View(bank)
?bank
attach(bank)
summary(bank)
hist(length)
range(length)
range(Length)
hist(Length)
boxplot(Length)
boxplot(age, horizontal = TRUE)
boxplot(age, horizontal = TRUE)
boxplot(Length, horizontal = TRUE)
hist(Length)
boxplot(Length, horizontal = TRUE)
hist(Length)
hist(Left)
boxplot(Left, horizontal = TRUE)
hist(Left)
hist(Right)
boxplot(Right, horizontal = TRUE)
hist(Top)
boxplot(Top, horizontal = TRUE)
hist(Top)
boxplot(Top, horizontal = TRUE)
hist(Diagonal)
boxplot(Diagonal, horizontal = TRUE)
hist(Diagonal)
hist(Status)
boxplot(Status)
plot(Length, Status)
pie(Length, Status)
cor(Length, Status)
pie(table(Length, Status))
table(Length, Status)
boxplot(Length ~ Status)
hist(Length)
boxplot(Length, horizontal = TRUE)
par(mfrow=c(2,1))
hist(Length)
boxplot(Length, horizontal = TRUE)
#for lenght, its contains more data from 214.6 to 215.1
par(mfrow=c(1,1))
par(mfrow=c(2,1))
hist(Left)
boxplot(Left, horizontal = TRUE)
#for left, its contains more data from 229.9 to 230.4
par(mfrow=c(2,1))
hist(Right)
boxplot(Right, horizontal = TRUE)
#for right, its contains more data from 129.7 to 130.3
par(mfrow=c(2,1))
hist(Top)
boxplot(Top, horizontal = TRUE)
#for Top, in hist data contains from 129.2 - 130.4
#in BP more data concentrated in 10.05 - 11.2
par(mfrow=c(2,1))
hist(Diagonal)
boxplot(Diagonal, horizontal = TRUE)
#for right, its contains more data from [139-140] and [141-142] but the interval
#is not clear in boxplot
par(mfrow=c(2,1))
hist(Status)
boxplot(Status)
#there are equal number of actual and fake card here
boxplot(Length ~ Status)
par(mfrow=c(1,1))
boxplot(Length ~ Status)
pie(Length ~ Status)
pie(Length ~ Status)
pie(Status ~ Length)
pie(Status ~ Length)
barplot(table(Length, Status), beside=TRUE)
par(mfrow=c(2,1))
### Part 2
table(Length, Status)
barplot(table(Length, Status), beside=TRUE)
mosaicplot(table(card, dependents), col=rainbow(30))
### Part 2
table(Length, Status)
barplot(table(Length, Status), beside=TRUE)
mosaicplot(table(Length, Status), col=rainbow(30))
par(mfrow=c(2,1))
### Part 2
table(Length, Status)
barplot(table(Length, Status), beside=TRUE)
mosaicplot(table(Length, Status), col=rainbow(30))
mosaicplot(table(Length, Status), col=rainbow(10))
mosaicplot(table(Length, Status), col=rainbow(5))
par(mfrow=c(2,1))
### Part 2
#for length
table(Length, Status)
barplot(table(Length, Status), beside=TRUE)
mosaicplot(table(Length, Status), col=rainbow(100))
par(mfrow=c(2,1))
### Part 2
#for length
table(Length, Status)
barplot(table(Length, Status), beside=TRUE)
mosaicplot(table(Length, Status), col=rainbow(4))
#for Left
table(Left, Status)
barplot(table(Left, Status), beside=TRUE)
mosaicplot(table(Left, Status), col=rainbow(4))
#for Right
table(Right, Status)
barplot(table(Right, Status), beside=TRUE)
mosaicplot(table(Right, Status), col=rainbow(4))
#for Top
table(Top, Status)
barplot(table(Top, Status), beside=TRUE)
mosaicplot(table(Top, Status), col=rainbow(4))
#for Diagonal
table(Diagonal, Status)
barplot(table(Diagonal, Status), beside=TRUE)
mosaicplot(table(Diagonal, Status), col=rainbow(4))
1 + 1
100:130
5 -
1
3 % 5
3 % 5
2 * 3
3 % 5
4-1
6/(4-1)
7 + 2
*3
-6
a = 7
a = (a + 2)*3
a = a/3
a
1:
6
#assignment
a <- 1
a
a+2
die <- 1:6
die
my_number <- 1
my_number
my_number <- 999
my_number
ls()
die - 1
die / 2
die_square = die * die
die_square
1:2
die + 1:2
die + 1:4
die + 1:3
die+ 1:4
die
die %*% die
die %o% die
t(die)
det(die)
determinant(die)
det(die)
round(3.1416)
factorial(3)
factorial(1:3)
mean(1:6)
mean(die)
round(mean(die))
sample(x=1:4, size=2)
sample(x=die, 10)
sample(die, 10)
sample(die, 5)
args(round)
args(sample)
sample(x=die, size = 10, replace = TRUE)
roll <- function(){}
roll <- function(){
die <- 1:6
dice <- sample(die, size = 2, replace = TRUE)
sum(dice)
}
roll()
roll()
roll()
roll()
roll
roll()
roll()
roll2()
roll2 <- function(bones=1:6){
dice <- sample(die, size = 2, replace = TRUE)
sum(dice)
}
roll2()
roll2(1:3)
roll2 <- function(bones=1:6){
dice <- sample(bones, size = 2, replace = TRUE)
sum(dice)
}
roll2(1:3)
roll2(1:3)
roll2(1:3)
roll2(1:3)
roll2(1:3)
roll2(1:3)
install.packages("ggplot2")
library("ggplot2")
x <- c(-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1)
y <- x^3
qplot(x, y)
z = sin(x)
qplot(x, z)
z = sinpi(x)
qplot(x, z)
z = sinpi(x)
z
z = abs(x)
z
qplot(x, z)
install.packages("ggplot2")
library("ggplot2")
x <- c(-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1)
y <- x^3
qqplot(x,y)
#qq-plot with one extra parameter
qqplot(x,y, binwidth=1)
#qq-plot for x and x^3
qplot(x,y)
#qq-plot with one extra parameter
qplot(x,y, binwidth=1)
#qq-plot for x and x^3
qplot(x,y)
#qq-plot with one extra parameter
qplot(x,y, binwidth=1)
#qq-plot with one extra parameter
qplot(x, binwidth=1)
#qq-plot with one extra parameter
qplot(y, binwidth=1)
qplot(z, binwidth=1)
#qq-plot with one extra parameter
z <- c(1, 2, 2, 2, 3, 3)
qplot(z, binwidth=1)
qplot(z, binwidth=.5)
qplot(z, binwidth=1.5)
qplot(z, binwidth=1)
#qq-plot with one extra parameter
z1 <- c(1, 2, 2, 2, 3, 3)
qplot(z1, binwidth=1)
#quick plot for another histogram
z2 = c(1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4)
qplot(z2, binwidth=1)
x1 <- replicate(3, 1+1)
x1
roll <- function(){
die <- 1:6
dice <- sample(die, size = 2, replace = TRUE)
sum(dice)
}
x2 <- replicate(10, roll())
sx
x2
rolls <- replicate(10000, roll())
qplot(rolls, binwidth=1)
?sample
prob <- c(replicate(5, 0.125))
prob
prob <- c(replicate(5, 0.125), (0.125*3))
prob
new_roll <- function(){
die <- 1:6
prob <- c(replicate(5, 0.125), (0.125*3))
dice <- sample(die, size = 2, replace = TRUE, prob = prob)
sum(dice)
}
rolls2 <- replicate(10000, new_roll())
qplot(rolls2, binwidth=1)
x1
qplot(rolls2, binwidth=1)
die <- c(1,2,3,4,5,6)
print(is.vector(die))
#Atomic Vector
die <- c(1,2,3,4,5,6)
print(is.vector(die))
five <- 5
print(is.vector(five))
print(length(five))
print(length(die))
print('Lengh of five ',length(five))
print('Lengh of five ' + length(five))
print('Lengh of five ' + str(length(five)))
print('Lengh of five %d' + length(five))
print('Lengh of five %i' + length(five))
sprint('Lengh of five %i' + length(five))
sprintf('Lengh of five %i' + length(five))
sprintf('Lengh of five %i', length(five))
sprintf('Lengh of five %i = ', length(five))
sprintf('Lengh of five =  %i', length(five))
sprintf('Length of die = %i', length(die))
print('Type of int is = %s', typeof(int))
int <- c(-1L, 2L, 4L)
print('Type of int is = %s', typeof(int))
sprintf('Type of int is = %s', typeof(int))
#Integers ends with L
int <- c(-1L, 2L, 4L)
print('Type of die is %s', typeof(die))
sprintf('Type of die is %s', typeof(die))
#If we want to store as Integers then have to ends each data with L
int <- c(-1L, 2L, 4L)
#If we want to store as Integers then have to ends each data with L
int <- c(-1L, 2L, 4L)
sprintf('Type of int is = %s', typeof(int))
#Character are covered with two qutations
text <- c("hello", "world")
#Character are covered with two quotations
text <- c("hello", "world")
print('Type of Text = %s', typeof(text))
sprintf('Type of Text = %s', typeof(text))
sprintf('The logic variable holds: %s', str(logic))
#Logicals
logic <- c(TRUE, 3>5, 3<5)
sprintf('The logic variable holds: %s', str(logic))
sprintf('logic = %s', str(logic))
paste(c("Logic = ", logic), collapse=" ")
sprintf('Type of logic = %s', typeof(logic))
?raw
xx <- raw(2)
xx[1] <- as.raw(40)     # NB, not just 40.
xx[2] <- charToRaw("A")
xx       ## 28 41   -- raw prints hexadecimals
dput(xx) ## as.raw(c(0x28, 0x41))
as.integer(xx)
print(xx)
xx[1] <- as.integer(40)     # NB, not just 40.
xx[2] <- charToRaw("A")
xx       ## 28 41   -- raw prints hexadecimals
print(xx)
xx[1] <- intToUtf8(40)     # NB, not just 40.
xx       ## 28 41   -- raw prints hexadecimals
xx[1] <- as.raw(40)     # NB, not just 40.
xx       ## 28 41   -- raw prints hexadecimals
hand <- c("ace", "king", "queen", "jack", "ten")
hand
#attributes
names(die) <- c("one", "two", "three", "four", "five", "six")
attributes(die)
print(die)
#Update the names attributes
names(die) <- c("uno", "dos", "tres", "quarto", "cinco", "seis")
print(die)
#Remove names attributes
names(die) <-NULL
print(die)
#Set dimension to a vector
dim(die) <- c(2,3)
die
#make 3x2 dim
dim(die) <- c(3,2)
die
m <- matrix(die, nrow = 2)
print(m)
#By default it will fill the matrix column by column
m <- matrix(die, nrow = 2)
print(m)
#But, if we specify byrow=TRUE, then it will fill row by row
m <- matrix(die, nrow = 2, byrow = TRUE)
print(m)
#
class(die)
class(die)
#
die <- c(1,2,3,4,5,6)
class(die)
typeof(die)
class(die)
#if we convert numeric to matrix
dim(die) <- c(2,3)
die
typeof(die)
class(die)
#Dates and Times
now <- Sys.time()
now
typeof(now)
class(now)
#See the seconds passed from 1/1/1970 (UTC)
unclass(now)
print(gender)
#Factor
gender <- factor(c("male", "male", "female", "female", "male"))
print(gender)
typeof(gender)
class(gender)
unclass(gender)
list1
#Lists
list1 <- list(100:120, "Rahat", list(FALSE, TRUE))
list1
#Data Frames
df <- date.frame(face=c("ace", "two", "six"),
suit=c("clubs", "clubs", "clubs"),
value=c(1,2,3))
#Data Frames
df <- date.frame(face=c("ace", "two", "six"),
suit=c("clubs", "clubs", "clubs"),
value=c(1,2,3))
#Data Frames
df <- date.frame(face=c("ace", "two", "six"), \
suit=c("clubs", "clubs", "clubs"),
value=c(1,2,3))
#Data Frames
df <- date.frame(face=c("ace", "two", "six"), \
suit=c("clubs", "clubs", "clubs"), \
value=c(1,2,3))
#Data Frames
df <- date.frame(face=c("ace", "two", "six"), \
suit=c("clubs", "clubs", "clubs"), \
value=c(1,2,3))
#Data Frames
df <- date.frame(face=c("ace", "two", "six"), suit=c("clubs", "clubs", "clubs"), value=c(1,2,3))
#Data Frames
df <- date.frame(face=c("ace", "two", "six"), suit=c("clubs", "clubs", "clubs"), value=c(1,2,3))
#Data Frames
df <- date.frame(face=c("ace", "two", "six"), suit=c("clubs", "clubs", "clubs"), value=c(1,2,3))
#Data Frames
df <- data.frame(face=c("ace", "two", "six"), suit=c("clubs", "clubs", "clubs"), value=c(1,2,3))
#Data Frames
df <- data.frame(face=c("ace", "two", "six"),
suit=c("clubs", "clubs", "clubs"),
value=c(1,2,3))
df
typeof(df)
class(df)
str(df)
deck <- read.csv("C:/Users/DELL/Desktop/Winter 2021-2022/Statistical Computing/Resources/9629323-ee5dfc039fd581cb467cc69c226ea2524913c3d8/9629323-ee5dfc039fd581cb467cc69c226ea2524913c3d8/deck.csv")
View(deck)
#Loading data sets
head(deck)
#get working directory
getwd()
setwd("C:/Users/DELL/Desktop/Winter 2021-2022/Statistical Computing/Resources")
#get working directory
getwd()
